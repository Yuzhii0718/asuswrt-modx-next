/*
 *  A Sample GPIO driver for Semtech SX1503 I2C GPIO Expanders
 *
 *  with Netgear R6700v2/R6800/R6900v2 LED driver
 *
 *  Copyright (c) 2019 PandoraBox Team
 *  Copyright (c) 2021 SWRTdev
 *
 *   lintel<lintel.huang@gmail.com>
 *
 */

#include <linux/gpio.h>
#include <linux/i2c.h>
#include <linux/init.h>
#include <linux/irq.h>
#include <linux/module.h>
#include <linux/slab.h>
#include <linux/leds.h>
#include <linux/delay.h>
#include <linux/spinlock.h>

/* 16 GPIOs */
#define SX1503_GPIO_MAX_NUM		16

#define SX1503_GPIO_BANK0_BASE	0
#define SX1503_GPIO_BANK1_BASE	8

#define SX1503_GPIO_REG_MASK	0xFF

#define SX1503_GPIO_SET_OUTPUT	1
#define SX1503_GPIO_SET_INPUT	0

#define SX1503_GPIO_OUTPUT_HIGH	1
#define SX1503_GPIO_OUTPUT_LOW	0

/* Base REG */
#define SX1503_REG_DATA			0x00
#define SX1503_REG_PULL_UP		0x04
#define SX1503_REG_PULL_DOWN	0x06
#define SX1503_REG_DIR			0x02

/* IRQ REG,but we not need */
#define SX1503_REG_IRQ_SRC		0x0e
#define SX1503_REG_IRQ_MASK		0x08
#define SX1503_REG_SENSE		0x0a

#define SX1503_REG_MAX		0xAD

#define to_netgear_led(led_cdev) \
	container_of(led_cdev, struct netgear_led, cdev)

struct netgear_led {
	char *name;
	struct led_classdev cdev;
	struct i2c_client *client;
	unsigned char gpio;
	u8 active_low;
	u8 status;
	struct mutex lock;
};

static spinlock_t sx1503_lock;

static struct netgear_led netgear_led_devices[] = {
	{
		.name = "netgear:lan4:orange",
		.gpio =  0,
		.status =  0,
		.active_low = 1,
	}, {
		.name = "netgear:lan4:white",
		.gpio =  1,
		.status =  0,
		.active_low = 1,
	}, {
		.name = "netgear:lan3:orange",
		.gpio =  2,
		.status =  0,
		.active_low = 1,
	}, {
		.name = "netgear:lan3:white",
		.gpio =  3,
		.status =  0,
		.active_low = 1,
	}, {
		.name = "netgear:lan2:orange",
		.gpio =  4,
		.status =  0,
		.active_low = 1,
	}, {
		.name = "netgear:lan2:white",
		.gpio =  5,
		.status =  0,
		.active_low = 1,
	}, {
		.name = "netgear:lan1:orange",
		.gpio =  6,
		.status =  0,
		.active_low = 1,
	}, {
		.name = "netgear:lan1:white",
		.gpio =  7,
		.status =  0,
		.active_low = 1,
	}, {
		.name = "netgear:power:orange",
		.gpio =  8,
		.status =  0,
		.active_low = 1,
	}, {
		.name = "netgear:power:white",
		.gpio =  9,
		.status =  0,
		.active_low = 1,
	}, {
		.name = "netgear:internet:orange",
		.gpio =  10,
		.status =  0,
		.active_low = 1,
	}, {
		.name = "netgear:internet:white",
		.gpio =  11,
		.status =  0,
		.active_low = 1,
	}, {
		.name = "netgear:2g:white",
		.gpio =  12,
		.status =  0,
		.active_low = 1,
	}, {
		.name = "netgear:5g:white",
		.gpio =  13,
		.status =  0,
		.active_low = 1,
	}, {
		.name = "netgear:guest:white",
		.gpio =  14,
		.status =  0,
		.active_low = 1,
	}, {
		.name = "netgear:usb:white",
		.gpio =  15,
		.status =  0,
		.active_low = 1,
	},
};

static struct i2c_client *sx1503_i2c_client;

static s32 sx1503_i2c_write(struct i2c_client *client, u8 reg, u8 val)
{
	s32 err;

	spin_lock(&sx1503_lock); 

	err = i2c_smbus_write_byte_data(client, reg, val);
	if (err < 0)
		dev_warn(&client->dev,
			 "i2c write fail: can't write %02x to %02x: %d\n",
			 val, reg, err);

	spin_unlock(&sx1503_lock);
	return err;
}

static s32 sx1503_i2c_read(struct i2c_client *client, u8 reg, u8 *val)
{
	s32 err;
	
	unsigned long flags = 0;
	spin_lock_irqsave(&sx1503_lock, flags); 

	err = i2c_smbus_read_byte_data(client, reg);
	if (err >= 0)
		*val = err;
	else
		dev_warn(&client->dev,
			 "i2c read fail: can't read from %02x: %d\n",
			 reg, err);

	spin_unlock_irqrestore(&sx1503_lock, flags);
	return err;
}

static int sx1503_switch_bank(u8 *reg, unsigned char *offset)
{
	if(*offset >= SX1503_GPIO_BANK0_BASE  && *offset < SX1503_GPIO_BANK1_BASE) {
		/* nothing to do,default bank0 */
	} else if(*offset >= SX1503_GPIO_BANK1_BASE && *offset < SX1503_GPIO_MAX_NUM) {
		/* switch to bank1 */
		*reg = SX1503_REG_DIR + 1;
		*offset -= SX1503_GPIO_BANK1_BASE;
	} else
		return -1;
	return 0;
}

#if 0
static int sx1503_gpio_get_direction(struct i2c_client *client, unsigned char offset)
{
	u8 reg = SX1503_REG_DIR;
	u8 value;
	int ret;

	sx1503_switch_bank(&reg, &offset);

	ret = sx1503_i2c_read(client, reg, &value);

	if (ret < 0)
		return ret;

	return !!(value & BIT(offset));
}
#endif

static void sx1503_gpio_set_direction(struct i2c_client *client, unsigned char offset, int direction)
{
	u8 reg = SX1503_REG_DIR;
	u8 value;

	sx1503_switch_bank(&reg, &offset);

	sx1503_i2c_read(client, reg, &value);

	if(!direction)
		value |= BIT(offset);
	else
		value &= ~(BIT(offset));

	sx1503_i2c_write(client, reg, value);
}

#if 0
static int sx1503_gpio_get_value(struct i2c_client *client, unsigned char offset)
{
	u8 value;
	int ret;
	u8 reg = SX1503_REG_DATA;

	sx1503_switch_bank(&reg, &offset);

	ret = sx1503_i2c_read(client, reg, &value);

	if (ret < 0)
		return ret;

	return !!(value & BIT(offset));
}
#endif

static void sx1503_gpio_set_value(struct i2c_client *client, unsigned char offset, int value)
{
	u8 tmp;
	u8 reg = SX1503_REG_DATA;

	sx1503_switch_bank(&reg, &offset);

	sx1503_i2c_read(client, reg, &tmp);

	if(value)
		tmp |= BIT(offset);
	else
		tmp &= ~(BIT(offset));

	sx1503_i2c_write(client, reg, tmp);
}

#if 0
static int sx1503_gpio_direction_input(struct i2c_client *client, unsigned char offset)
{
	sx1503_gpio_set_direction(client, offset, SX1503_GPIO_SET_INPUT);
	return 0;
}
#endif

static int sx1503_gpio_direction_output(struct i2c_client *client, unsigned char offset, int value)
{
	sx1503_gpio_set_direction(client, offset, SX1503_GPIO_SET_OUTPUT);
	sx1503_gpio_set_value(client, offset, value);
	return 0;
}

static void sx1503_reset(struct i2c_client *client)
{
	int i;

	printk("Reset Semtech SX1503 GPIOs!\n");

	/* for sx1503 device init, REG 0x00~0xAD need reset to 0 */
	for(i = 0; i <= SX1503_REG_MAX; i++) {
		u8 val;
		sx1503_i2c_read(client, i, &val);
		sx1503_i2c_write(client, i, 0x00);
		udelay(100);
	}

	/* default output high,maybe dangerous */
	for(i = 0; i <= SX1503_GPIO_MAX_NUM; i++) {
		sx1503_gpio_direction_output(client, i, SX1503_GPIO_OUTPUT_HIGH);
		udelay(100);
	}
}

/* Netgear LED Driver */
static void  netgear_led_brightness_set(struct led_classdev *led, enum led_brightness brightness)
{
	struct netgear_led *netgear_led = to_netgear_led(led);

	if (brightness == LED_OFF){
		sx1503_gpio_set_value(netgear_led->client, netgear_led->gpio, SX1503_GPIO_OUTPUT_HIGH /*^ netgear_led->active_low*/);
		netgear_led->status = SX1503_GPIO_OUTPUT_HIGH;
	}else{
		sx1503_gpio_set_value(netgear_led->client, netgear_led->gpio, SX1503_GPIO_OUTPUT_LOW /*^ netgear_led->active_low*/);
		netgear_led->status = SX1503_GPIO_OUTPUT_LOW;
	}
}

void bled_sx150x_set(unsigned char gpio, enum led_brightness brightness)
{
	struct netgear_led *netgear_led = &netgear_led_devices[gpio];
	//printk("[set]id:%d, name:%s, gpio=%d\n", gpio, netgear_led->name, netgear_led->gpio);
	netgear_led->cdev.default_trigger = brightness ? "default-on" : "none";
	netgear_led->cdev.brightness_set(&netgear_led->cdev, brightness);
}

static int register_netgear_leds(struct i2c_client *client, struct netgear_led *netgear_led, unsigned int led_num)
{
	int i;
	int ret;

	for(i = 0; i < led_num; i++ ) {
		netgear_led->client = client;
		sx1503_gpio_direction_output(client, netgear_led->gpio, SX1503_GPIO_OUTPUT_HIGH /*^ netgear_led->active_low*/);
		netgear_led->cdev.name = netgear_led->name;
		netgear_led->cdev.brightness_set = netgear_led_brightness_set;
		ret = led_classdev_register(NULL, &netgear_led->cdev);

		if(!ret) {
			printk("registered led device: %s\n", netgear_led->name);
		}

		netgear_led++;
	}
	bled_sx150x_set(9, LED_FULL);
	return 0;
}

static int unregister_netgear_leds(struct i2c_client *client, struct netgear_led *netgear_led, unsigned int led_num)
{
	int i;

	for(i = 0; i < led_num; i++ ) {
		netgear_led->client = client;
		led_classdev_unregister(&netgear_led->cdev);
		netgear_led++;
	}

	return 0;
}

static struct i2c_board_info __initdata sx1503_dev = {
	I2C_BOARD_INFO("sx1503", 0x20),
};

static int __init sx1503_leds_init(void)
{
	int ret = 0;
	struct i2c_adapter *i2c_adap;
	static const u32 i2c_funcs = I2C_FUNC_SMBUS_BYTE_DATA |
				     I2C_FUNC_SMBUS_WRITE_WORD_DATA;

	printk("Netgear R6700v2/R6800/R6900v2 LED driver initialized\n");

	spin_lock_init(&sx1503_lock);
	
	/* get i2c bus0 */
	i2c_adap = i2c_get_adapter(0);

	if (!i2c_check_functionality(i2c_adap, i2c_funcs)) {
		printk("%s:i2c_check_functionality err \n", __FUNCTION__);
		return -ENOSYS;
	}

	sx1503_i2c_client = i2c_new_device(i2c_adap, &sx1503_dev);

	if (!sx1503_i2c_client)
		printk("sx1503:register i2c error!\n");

	i2c_put_adapter(i2c_adap);

	sx1503_reset(sx1503_i2c_client);

	ret = register_netgear_leds(sx1503_i2c_client, &netgear_led_devices[0], ARRAY_SIZE(netgear_led_devices));

	return ret;
}
module_init(sx1503_leds_init);

static void __exit sx1503_leds_exit(void)
{
	int ret;

	printk("Netgear R6700v2/R6800/R6900v2 LED driver unregister\n");

	ret = unregister_netgear_leds(sx1503_i2c_client, &netgear_led_devices[0], ARRAY_SIZE(netgear_led_devices));

	if(sx1503_i2c_client) {
		i2c_unregister_device(sx1503_i2c_client);
		sx1503_i2c_client = NULL;
	}

}
module_exit(sx1503_leds_exit);

MODULE_AUTHOR("lintel<lintel.huang@gmail.com>");
MODULE_DESCRIPTION("Driver for Semtech SX1503 I2C GPIO Expanders with Netgear LED driver");
MODULE_LICENSE("GPL");
MODULE_ALIAS("i2c:sx1503");


